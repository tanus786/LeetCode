class Solution {
    char[] nums = {'0','1','2','3','4','5','6','7','8','9'};
    public void solveSudoku(char[][] board) {
        boolean check = sudokuSolver(board,0,0);
    }
    public boolean sudokuSolver(char[][] board, int row, int col){
        if(row == 9) return true;
        int nextRow = row, nextCol = col+1;
        if(col+1==9){
            nextRow = row+1;
            nextCol = 0;
        }
        if(board[row][col] != '.'){
            return sudokuSolver(board,nextRow,nextCol);
        }
        for(int digit = 1; digit<=9; digit++){
            if(isSafe(board,row,col,digit)){
                board[row][col] = nums[digit];
                if(sudokuSolver(board,nextRow,nextCol)){
                    return true;
                }
                board[row][col]='.';
            }
        }
        return false;
    }
    public  boolean isSafe(char[][] board, int row, int col, int digit){
        for(int i = 0; i<=8; i++){
            if(board[row][i] == nums[digit]) return false;
        }
        for(int j = 0; j<=8; j++){
            if(board[j][col] == nums[digit]) return false;
        }
        int startRow = (row/3)*3;
        int startCol = (col/3)*3;
        for(int i = startRow; i<startRow+3; i++){
            for(int j = startCol; j<startCol+3; j++){
                if(board[i][j] == nums[digit]) return false;
            }
        }
        return true;
    }
}