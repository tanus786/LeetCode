class Solution {
    public int maximalRectangle(char[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int res[] = new int[m];
        int ans = 0;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(matrix[i][j] == '0'){
                    res[j] = 0;
                }
                else res[j] += 1;
            }
            int curr = maxArea(res);
            ans = Math.max(ans,curr);
        }
        return ans;
    }
    public int maxArea(int[] a){
        int n = a.length;
        Stack<Integer> s = new Stack<Integer>();
        int ps[] = new int[n];
        int ns[] = new int[n];
        int res = 0;

        for(int i = 0; i<n; i++){
            while(!s.isEmpty() && a[s.peek()]>=a[i]) s.pop();
            if(s.isEmpty()) ps[i] = -1;
            else ps[i] = s.peek();
            s.push(i);
        }
        while(!s.isEmpty()) s.pop();

        for(int i = n-1; i>=0; i--){
            while(!s.isEmpty() && a[s.peek()]>=a[i]) s.pop();
            if(s.isEmpty()) ns[i] = n;
            else ns[i] = s.peek();
            s.push(i);
        }
        for(int i = 0; i<n; i++){
            int curr = (ns[i]-ps[i]-1)*a[i];
            res = Math.max(res,curr);
        }
        return res;
    }
}